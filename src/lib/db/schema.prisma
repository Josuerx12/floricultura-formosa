// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
  SELLER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  phone         String?
  email         String          @unique
  emailVerified DateTime?
  role          UserRoles?      @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  order     order[]
  address   address[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model category {
  id            Int           @id @default(autoincrement())
  name          String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  subcategories subcategory[]
}

model subcategory {
  id          Int       @id @default(autoincrement())
  category_id Int
  name        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  category    category  @relation(fields: [category_id], references: [id])
  products    product[]
}

model product {
  id             Int              @id @default(autoincrement())
  subcategory_id Int
  name           String
  description    String
  price          Float
  stock_quantity Int
  subcategory    subcategory      @relation(fields: [subcategory_id], references: [id])
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  product_images product_images[]
  promotions     promotions[]
  order_item     order_item[]
}

model product_images {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String
  file_key   String
  bucket     String
  created_at DateTime @default(now())
  product    product  @relation(fields: [product_id], references: [id])
}

model promotions {
  id                  Int      @id @default(autoincrement())
  product_id          Int
  discount_percentage Float
  start_date          DateTime
  end_date            DateTime
  product             product  @relation(fields: [product_id], references: [id])
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}

model order {
  id                         String       @id @default(cuid())
  user_id                    String
  mercado_pago_preference_id String?
  user                       User         @relation(fields: [user_id], references: [id])
  items                      order_item[]
  status                     OrderStatus  @default(PENDING)
  total_price                Decimal
  delivery_fee               Decimal
  observation                String?
  address_id                 String?
  address                    address?     @relation(fields: [address_id], references: [id])
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
}

model order_item {
  id         String  @id @default(cuid())
  order_id   String
  order      order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_id Int
  product    product @relation(fields: [product_id], references: [id])
  quantity   Int
  price      Decimal
}

model address {
  id              String        @id @default(cuid())
  user_id         String
  user            User          @relation(fields: [user_id], references: [id])
  street          String
  number          String
  complement      String?
  district        String
  city            String
  state           String
  zipCode         String
  delivery_fee_id String?
  delivery_fee    delivery_fee? @relation(fields: [delivery_fee_id], references: [id])
  order           order[]
}

model delivery_fee {
  id       String    @id @default(cuid())
  district String    @unique
  fee      Decimal
  address  address[]
}

model banners {
  id           Int      @id @default(autoincrement())
  title        String
  url          String
  redirect_url String
  file_key     String
  bucket       String
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
