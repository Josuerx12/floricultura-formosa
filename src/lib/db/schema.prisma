// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
  SELLER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  phone         String?
  email         String          @unique
  emailVerified DateTime?
  role          UserRoles?      @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model category {
  id            Int           @id @default(autoincrement())
  name          String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  subcategories subcategory[]
}

model subcategory {
  id          Int       @id @default(autoincrement())
  category_id Int
  name        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  category    category  @relation(fields: [category_id], references: [id])
  products    product[]
}

model product {
  id             Int              @id @default(autoincrement())
  subcategory_id Int
  name           String
  description    String
  price          Float
  stock_quantity Int
  subcategory    subcategory      @relation(fields: [subcategory_id], references: [id])
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  product_images product_images[]
  promotions     promotions[]
}

model product_images {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String
  file_key   String
  bucket     String
  created_at DateTime @default(now())
  product    product  @relation(fields: [product_id], references: [id])
}

model promotions {
  id                  Int      @id @default(autoincrement())
  product_id          Int
  discount_percentage Float
  start_date          DateTime
  end_date            DateTime
  product             product  @relation(fields: [product_id], references: [id])
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}
